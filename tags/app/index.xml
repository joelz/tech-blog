<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App on Notes by Joel</title><link>https://joelz.github.io/tech-blog/tags/app/</link><description>Recent content in App on Notes by Joel</description><generator>Hugo</generator><language>en-us</language><copyright>Copy, right? 🤔</copyright><lastBuildDate>Tue, 15 Aug 2023 12:01:58 +0800</lastBuildDate><atom:link href="https://joelz.github.io/tech-blog/tags/app/index.xml" rel="self" type="application/rss+xml"/><item><title>短信链接拉起 app 方案</title><link>https://joelz.github.io/tech-blog/posts/20230815-android_app_links/</link><pubDate>Tue, 15 Aug 2023 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20230815-android_app_links/</guid><description>需求 短信链接拉起app，去到app的某个特定页面。
结论 iOS 上采用 Universal Links，Android 上采用 URL Scheme(非https/http)。落地页统一使用 Universal Links 指向的 app 下载页。如果考虑到用户可能没有安装 app，那 https://www.kerryplus.com/ulink/ 需要返回页面（一般就是一个app下载页），这个页面上再执行 android 端的 url scheme 拉起app，类似这样的代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** * 检查是否从短信中需拉起app的链接进入，如果是，且在 Anroid 上，则尝试拉起 app */ function checkAppDeepLink() { const platform = getMobileOperatingSystem(); const href = location.href; const index = href.indexOf(&amp;#39;/ulink/&amp;#39;); if (index &amp;gt; -1) { const param = href.</description></item><item><title>小程序及App内嵌H5</title><link>https://joelz.github.io/tech-blog/posts/20220418-weixin_mp_webview/</link><pubDate>Mon, 18 Apr 2022 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20220418-weixin_mp_webview/</guid><description>微信小程序内嵌 H5 通信机制 微信小程序向 H5 发送消息 URL search 传参：在 H5 初始加载时，通常会带上用户的登录态作为参数，使 H5 可以继续与后台交互。类似 https://example.com/h5.html?token=SGVsbG9Xb3JkIQ== URL hash 传参：在 H5 浏览期间，可以 利用网页 URL 中的 hash 部分改变不会导致网页重新加载的特点，实现小程序向 H5 发送消息。但是：【报Bug】UNIAPP H5修改hash模式的URL参数会导致页面重载，以前旧的hbx2.8.11是不会重载的 - DCloud问答 websocket H5 向微信小程序发送消息 postMessage：小程序内嵌 H5 可以使用 JSSDK 向小程序发送消息。网页向小程序 postMessage 时，只会在特定时机（小程序后退、组件销毁、分享）触发并收到消息，不是实时触发。e.detail = { data }，data是多次 postMessage 的参数组成的数组 路由传参：在使用 JSSDK 调起小程序页面时，可以通过在页面路径后携带参数的方式通信。类似 wx.miniProgram.navigateTo({ url: '/path/to/page?foo=bar' }) websocket 不足 对于需要用户交互才能使用的小程序能力（比如分享，获取用户手机号，获取用户信息，获取用户头像，订阅消息等），需要跳转页面 WebView 页面的导航栏只能固定用默认的白底黑字风格 参考链接 微信小程序混合开发笔记 微信小程序+webview+vue混合开发 传值踩坑_choutian5268的博客-CSDN博客 【报Bug】UNIAPP H5修改hash模式的URL参数会导致页面重载，以前旧的hbx2.8.11是不会重载的 - DCloud问答 - web-view | 微信开放文档 App内嵌 H5 通信机制 App向 H5 发送消息 evalJS： 1 2 3 4 5 const js = `window.</description></item><item><title>uni-app 多端项目接入阿里云 ARMS</title><link>https://joelz.github.io/tech-blog/posts/20211105-aliyun_arms/</link><pubDate>Fri, 05 Nov 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20211105-aliyun_arms/</guid><description>官方文档 App监控概述 前端监控文档导读 什么是ARMS前端监控？ vue项目如何引入 alife-logger - npm 如何引入阿里云ARMS前端监控？ · Issue #102 · FrankKai/FrankKai.github.io · GitHub GitHub - rochzp/vue-arms: 基于阿里ARMS的Vue插件 uniapp如何引入 H5：同vue项目处理方式。 小程序：小程序方式。 app：和小程序处理方式一致。然后request那里是无法自动上报的，要手动上报。 uniapp开发的微信小程序可以集成阿里云arms前端监控吗 Taro(mpvue/uniapp)引入Arms阿里前端监控 - Sushome 开始监控微信小程序 webfunny前端监控平台新增功能教程：获取小程序、uni-app探针安装 - 掘金 (9条消息) 原生h5添加阿里云ARMS前端监控__小郑有点困了的博客-CSDN博客 生命周期 - uni-app官网</description></item><item><title>App 持续集成</title><link>https://joelz.github.io/tech-blog/posts/20211026-app_ci/</link><pubDate>Tue, 26 Oct 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20211026-app_ci/</guid><description>Android: build from command line 从命令行构建您的应用 | Android 开发者 | Android Developers gradle - Build Android Studio app via command line - Stack Overflow Android Studio: how to generate signed apk using Gradle? | Newbedev Set Android apk filename in Gradle · Taneli Korri android - You have not accepted the license agreements of the following SDK components - Stack Overflow iOS: build from command line iOS versioning | Twitch Blog how to generate the .</description></item><item><title>App CPU 架构是 x86 还是 x64？</title><link>https://joelz.github.io/tech-blog/posts/20210910-app_arch_x86_x64/</link><pubDate>Fri, 10 Sep 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20210910-app_arch_x86_x64/</guid><description>Android app 上架应用商店时被问到 app 是 32 位还是 64 位的。所以有了这一片辨析。
iOS：64位 In iOS 11 and later, all apps use the 64-bit architecture. If your app targets an earlier version of iOS, you must update it to run on later versions.
Android：32位+64位 ABI是英文Application Binary Interface的缩写，及应用二进制接口。
Android 主要的ABIs: 32位：
X86 armeabi armeabi-v7a 64位：
X86–64, arm64-v8a, Android 7种CPU架构在当前市场的占有率 arm64-v8a: 目前主流版本 armeabi-v7a: 一些老旧的手机 x86 / x86_64: x86 架构的手机都会包含由 Intel 提供的称为 Houdini 的指令集动态转码工具，实现对 arm .so 的兼容，再考虑 x86 1% 以下的市场占有率，x86 相关的两个 .</description></item><item><title>Capacitor setup in Apple M1 Mac</title><link>https://joelz.github.io/tech-blog/posts/20210504-capacitor_setup_in_apple_m1/</link><pubDate>Tue, 04 May 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20210504-capacitor_setup_in_apple_m1/</guid><description>运行环境 macOS Big Sur 11.2.2 Xcode 12.4 Android Studio 4.1.3 node 14.16.1 Capacitor 2.4.1 Vue 3.0
Web npm install -g @ionic/cli git clone https://github.com/ionic-team/tutorial-photo-gallery-vue.git cd photo-gallery-capacitor-vue npm install ionic serve iOS 修改appId git clone下来的代码里面的appId是io.ionic.demo.pg.vue，要换成自己的。VS Code打开代码文件夹，查找替换该appId为新的appId（比如com.dc1979.capacitor.demo.vue）
安装arm版CocoaPod 参考的是这个SO：https://stackoverflow.com/a/66556339
确认安装了arm版Homebrew：which brew返回的结果是 /opt/homebrew/bin/brew。不是的话就按照这篇文章去安装arm版Homebrew：在 M1 芯片 Mac 上使用 Homebrew 安装arm版ruby：brew install ruby 把环境变量加到PATH中：echo 'export PATH=&amp;quot;/opt/homebrew/opt/ruby/bin:/opt/homebrew/lib/ruby/gems/3.0.0/bin:$PATH&amp;quot;' &amp;gt;&amp;gt; ~/.zshrc Execute source ~/.zshrc or restart your shell 确定which ruby返回的是$(brew --prefix)/opt/ruby/bin/ruby Install CocoaPods with sudo gem install cocoapods Make sure you are using the correct pod binary by executing which pod (should be $(brew --prefix)/lib/ruby/gems/3.</description></item></channel></rss>