<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>App on Notes by Joel</title><link>https://joelz.github.io/tech-blog/categories/app/</link><description>Recent content in App on Notes by Joel</description><generator>Hugo</generator><language>en-us</language><copyright>Copy, right? 🤔</copyright><lastBuildDate>Tue, 15 Aug 2023 12:01:58 +0800</lastBuildDate><atom:link href="https://joelz.github.io/tech-blog/categories/app/index.xml" rel="self" type="application/rss+xml"/><item><title>短信链接拉起 app 方案</title><link>https://joelz.github.io/tech-blog/posts/20230815-android_app_links/</link><pubDate>Tue, 15 Aug 2023 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20230815-android_app_links/</guid><description>需求 短信链接拉起app，去到app的某个特定页面。
结论 iOS 上采用 Universal Links，Android 上采用 URL Scheme(非https/http)。落地页统一使用 Universal Links 指向的 app 下载页。如果考虑到用户可能没有安装 app，那 https://www.kerryplus.com/ulink/ 需要返回页面（一般就是一个app下载页），这个页面上再执行 android 端的 url scheme 拉起app，类似这样的代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 /** * 检查是否从短信中需拉起app的链接进入，如果是，且在 Anroid 上，则尝试拉起 app */ function checkAppDeepLink() { const platform = getMobileOperatingSystem(); const href = location.href; const index = href.indexOf(&amp;#39;/ulink/&amp;#39;); if (index &amp;gt; -1) { const param = href.</description></item><item><title>App 持续集成</title><link>https://joelz.github.io/tech-blog/posts/20211026-app_ci/</link><pubDate>Tue, 26 Oct 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20211026-app_ci/</guid><description>Android: build from command line 从命令行构建您的应用 | Android 开发者 | Android Developers gradle - Build Android Studio app via command line - Stack Overflow Android Studio: how to generate signed apk using Gradle? | Newbedev Set Android apk filename in Gradle · Taneli Korri android - You have not accepted the license agreements of the following SDK components - Stack Overflow iOS: build from command line iOS versioning | Twitch Blog how to generate the .</description></item><item><title>App CPU 架构是 x86 还是 x64？</title><link>https://joelz.github.io/tech-blog/posts/20210910-app_arch_x86_x64/</link><pubDate>Fri, 10 Sep 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20210910-app_arch_x86_x64/</guid><description>Android app 上架应用商店时被问到 app 是 32 位还是 64 位的。所以有了这一片辨析。
iOS：64位 In iOS 11 and later, all apps use the 64-bit architecture. If your app targets an earlier version of iOS, you must update it to run on later versions.
Android：32位+64位 ABI是英文Application Binary Interface的缩写，及应用二进制接口。
Android 主要的ABIs: 32位：
X86 armeabi armeabi-v7a 64位：
X86–64, arm64-v8a, Android 7种CPU架构在当前市场的占有率 arm64-v8a: 目前主流版本 armeabi-v7a: 一些老旧的手机 x86 / x86_64: x86 架构的手机都会包含由 Intel 提供的称为 Houdini 的指令集动态转码工具，实现对 arm .so 的兼容，再考虑 x86 1% 以下的市场占有率，x86 相关的两个 .</description></item><item><title>Capacitor setup in Apple M1 Mac</title><link>https://joelz.github.io/tech-blog/posts/20210504-capacitor_setup_in_apple_m1/</link><pubDate>Tue, 04 May 2021 12:01:58 +0800</pubDate><guid>https://joelz.github.io/tech-blog/posts/20210504-capacitor_setup_in_apple_m1/</guid><description>运行环境 macOS Big Sur 11.2.2 Xcode 12.4 Android Studio 4.1.3 node 14.16.1 Capacitor 2.4.1 Vue 3.0
Web npm install -g @ionic/cli git clone https://github.com/ionic-team/tutorial-photo-gallery-vue.git cd photo-gallery-capacitor-vue npm install ionic serve iOS 修改appId git clone下来的代码里面的appId是io.ionic.demo.pg.vue，要换成自己的。VS Code打开代码文件夹，查找替换该appId为新的appId（比如com.dc1979.capacitor.demo.vue）
安装arm版CocoaPod 参考的是这个SO：https://stackoverflow.com/a/66556339
确认安装了arm版Homebrew：which brew返回的结果是 /opt/homebrew/bin/brew。不是的话就按照这篇文章去安装arm版Homebrew：在 M1 芯片 Mac 上使用 Homebrew 安装arm版ruby：brew install ruby 把环境变量加到PATH中：echo 'export PATH=&amp;quot;/opt/homebrew/opt/ruby/bin:/opt/homebrew/lib/ruby/gems/3.0.0/bin:$PATH&amp;quot;' &amp;gt;&amp;gt; ~/.zshrc Execute source ~/.zshrc or restart your shell 确定which ruby返回的是$(brew --prefix)/opt/ruby/bin/ruby Install CocoaPods with sudo gem install cocoapods Make sure you are using the correct pod binary by executing which pod (should be $(brew --prefix)/lib/ruby/gems/3.</description></item></channel></rss>